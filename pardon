#!/usr/bin/env python

import argparse
from collections import namedtuple
import os
import shutil
import sys

Status = namedtuple("Status","status rc errmsg")

def trim(name):
    if name.startswith('./'): 
        name = name[2:]
    if name.endswith('/'):
        name = name[:-1]
    return name

def pardon(args):
    "Restore the exiled directory."
    # pre-conditions:
    # * linkname is a basename
    # * linkname is a symlink in the current directory
    # * linkname really point to a directory in the proper exile directory
    # * user has permissions move all files in the exiled directory
    linkname = trim(args.linkname)

    def check_linkname(linkname):
        if not os.path.exists(linkname):
            return Status(False, 37, 'real directory not found')
        if not os.path.islink(linkname):
            return Status(False, 38 ,'linkname must be a symbolic link')
        data = trim(os.readlink(linkname))
        if linkname != os.path.basename(data):
            msg = 'linkname is not the basename form of the exiled directory'
            return Status(False, 39, msg)
        return Status(True,0,'')

    check = check_linkname(linkname)
    if not check.status:
        print >>sys.stderr,check.errmsg
        return check.rc
        
    data = trim(os.readlink(linkname))

    os.remove(linkname)
    shutil.move(data,linkname)
    return 0


if __name__ == '__main__':
    p = argparse.ArgumentParser(description='Bring back exiled directory')
    p.add_argument('linkname',
                   help=('basename of directory to restore, ' +
                         'which is also the name of the symlink to it.'))
    p.set_defaults(func=pardon)
    args = p.parse_args()
    sys.exit(args.func(args))

    
