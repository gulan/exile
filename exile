#!/usr/bin/env python

"""
names
-----
my_projects -- dev root, my ~/1
bluesky -- the root directory of the bluesky project

The user visits a project:

  $ cd my_projects/bluesky

He sees a build directory, which has only generated code. He wants to keep
the projects under my_projects 'pure', which means they contain only source
code that he wrote. That can be done by 'exiling' the directory:

  $ exile build

The result is that the build is now a symlink to the original build
directory, which now resides in ~/my_projects/.exile/bluesky/

  $ ls -ld ~/my_projects/bluesky/build
    ~/my_projects/bluesky/build -> ~/my_projects/.exile/bluesky/build

The dir ~/my_projects/.exile/bluesky/ was created by the script, if it did not
already exist.

Additional directories may be exiled:

  exile other_peoples_code

If the user decides that a directory was exiled by mistake, he can
'pardon' it.

  pardon build

Pardon is the inverse (undo) of exile. The result is that the build
directory is again local, and there is no longer an entry
`~/my_projects/.exile/bluesky/build`.
"""

import argparse
import exiler
import sys

if __name__ == '__main__':
    p = argparse.ArgumentParser(description='Exile the named directory')
    p.add_argument('source', help='directory to exile')
    p.set_defaults(func=exiler.exile)
    args = p.parse_args()
    sys.exit(args.func(args))

    
